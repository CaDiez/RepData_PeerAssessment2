##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$valor)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor), color=factor(Hora)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1))
##BoxPlot con violin y jitter points Por Dia
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau()
##scale_color_gradient2(midpoint=mid,low="darkkhaki", mid="white", high="darkkhaki")
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$valor)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor), color=factor(Hora)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1))
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$valor))
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor), color=factor(Hora)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1))
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$valor))
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor), color=factor(Hora)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_color_gradient2(midpoint=mid,low="blue", mid="white", high="red")
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$valor))
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor), color=factor(Hora)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1))
mid<-mean(as.double(ConDias$valor))
mid
mid<-mean(as.double(ConDias$valor), na.rm=T)
mid<-mean(ConDias$Valor, na.rm=T)
mid<-mean(as.double(ConDias$Valor), na.rm=T)
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$Valor), na.rm=T)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor), color=factor(Hora)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_color_gradient2(midpoint=mid,low="blue", mid="white", high="red")
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$Valor), na.rm=T)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor), color=factor(Hora)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_color_gradient2(midpoint=mid,low="blue", high="red")
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$Valor), na.rm=T)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor), color=factor(Hora)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_color_gradient2(midpoint=mid,low="blue", high="red")
##BoxPlot con violin y jitter points Por Dia
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau()
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$Valor), na.rm=T)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_color_gradient2(midpoint=mid,low="blue", high="red")
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$Valor), na.rm=T)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
##BoxPlot con violin y jitter points Por Dia
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau()
mid<-mean(as.double(ConDias$Valor), na.rm=T)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,aes(color=Hora), position = position_jitter(width = 0.1)) +
scale_color_gradient2(midpoint=mid,low="blue", mid="white", high="red")
##BoxPlot con violin y jitter points
mid<-mean(as.double(ConDias$Valor), na.rm=T)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,aes(color=Hora), position = position_jitter(width = 0.1)
)
?scale_colour_tableau
tableau_color_pal("greenorange12")
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau()
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("greenorange12")
mid<-mean(as.double(ConDias$Valor), na.rm=T)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,aes(color=Hora), position = position_jitter(width = 0.1))+
scale_colour_tableau("bluered12")
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,aes(color=Hora), position = position_jitter(width = 0.1))
##BoxPlot con violin y jitter points Por Dia
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("greenorange12")
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("bluered12")
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("tableau10")
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("tableau20")
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("colorblind10")
##BoxPlot con violin y jitter points Por Dia
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("cyclic")
##BoxPlot con violin y jitter points Por Dia
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("greenorange12")
##BoxPlot con violin y jitter points
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,aes(color=Hora), position = position_jitter(width = 0.1))
q()
xyplot(Hora~NvoVal|dia, data=ConDias, panel=function (x, y, ...){
panel.xyplot(x, y, ...)
panel.lmline(x, y, col=2)})
source('~/Data Science/Analisis Paros.R')
##Con linea de regresion
xyplot(Hora~NvoVal|dia, data=ConDias, panel=function (x, y, ...){
panel.xyplot(x, y, ...)
panel.lmline(x, y, col=2)})
source('~/Data Science/Analisis Paros.R')
##BoxPlot con violin y jitter points Por Dia
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("greenorange12")
##BoxPlot con violin y jitter points
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,aes(color=Hora), position = position_jitter(width = 0.1))
source('~/Data Science/Analisis Paros.R')
##BoxPlot con violin y jitter points Por Dia
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("greenorange12")
setwd("~/Data Science")
source('~/Data Science/Analisis Paros.R')
setwd("~/")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="gray")
source('~/Data Science/Analisis Paros.R')
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="gray")
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="gray")
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="orange")
##BoxPlot con violin y jitter points
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="black")+geom_jitter(alpha=0.3,aes(color=Hora), position = position_jitter(width = 0.1))
##BoxPlot con violin y jitter points Por Dia
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="black")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("greenorange12")
##BoxPlot con violin y jitter points
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
g+geom_violin(alpha=1, color="black")+geom_jitter(alpha=0.3,aes(color=Hora), position = position_jitter(width = 0.1))
tableau_color_pal("greenorange12")
gr<-ggplot(ConDias, aes(x=dia, y=as.double(Valor), color=factor(dia)))
gr +geom_violin(alpha=1, color="black")+geom_jitter(alpha=0.3,position = position_jitter(width = 0.1)) +
scale_colour_tableau("greenorange12")
q()
source('~/Data Science/Analisis Paros.R')
View(ConDias)
cutpoints <- quantile(ConDias$Valor, seq(0, 1, length = 11), na.rm = TRUE)!
cutpoints <- quantile(as.double(ConDias$Valor), seq(0, 1, length = 11), na.rm = TRUE)!
cutpoints <- quantile(as.double(ConDias$Valor), seq(0, 1, length = 11), na.rm = TRUE)
ConDias$valdec<-cut(as.double(ConDias$Valor), cutpoints)
View(ConDias)
levels(ConDias$valdec)
g<-ggplot(ConDias, aes(x=Hora, y=as.double(Valor)))
+ facet_wrap(Hora ~ valdec, nrow = 2, ncol = 4)
+ facet_wrap(Hora ~ valdec, nrow = 1, ncol = 4)
+ facet_wrap(Hora ~ valdec)
q()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(lattice)
library(datasets)
data(airquality)
p <- xyplot(Ozone ~ Wind | factor(Month), data = airquality)
p
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
qplot(Wind, Ozone, data = airquality)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
?panel.lmline
panel.text
?panel.text
?panel.llines
??panel.llines
?llines
q()
install.packages("leafletR")
mymap<-leaftel()
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, "A ver")
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
library (leafletR)
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17)
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
devtools::install_github("rstudio/leaflet")
library(leaflet)
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
mymap
mymap<-leaflet()
mymap<-addTiles(mymap)
mymap
q
q()
library(leaflet)
mymap<-leaflet()
mymap<-addTiles(mymap)
mymap
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
q()
library(letleaf())
library(letleaf
)
library(leaflet)
source('~/Data Science/Mapas.R')
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
library(leaflet)
mymap<-leaflet() %>%
addTiles() %>%
setView(-84.3847, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
mymap
mymap<-leaflet() %>%
addTiles() %>%
setView(20.581607, -101.187137, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
mymap
mymap<-leaflet() %>%
addTiles() %>%
setView(20.581607, -101.187137, 33.7613, zoom=17) %>%
addPopups(-84.3847, 33.7616, 'A ver, <b>NICAR 2015</b>')
mymap
q()
q()
q()
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment1/Code.R')
setwd("~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment1")
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment1/Code.R')
View(dataActivity.wd.mean)
View(dataActivity.wd)
# Average number of steps during weekend/weekdays
dataActivity.wd.mean <- dataActivity.wd %>% group_by(interval,weekEnd.day) %>%
summarise(mean.steps = mean(steps, na.rm = T))
View(dataActivity.wd.mean)
View(dataActivity.wd.mean)
ggplot(dataActivity.wd.mean) + geom_line(aes(x = interval, y = mean.steps)) +
facet_wrap(~weekend.day,nrow = 2) + theme_bw() +
ggtitle('Mean number of steps per interval by weekday or weekend') +
ylab('Mean number of steps')
ggplot(dataActivity.wd.mean) + geom_line(aes(x = interval, y = mean.steps)) +
facet_wrap(~weekEnd.day,nrow = 2) + theme_bw() +
ggtitle('Mean number of steps per interval by weekday or weekend') +
ylab('Mean number of steps')
ggplot(dataActivity.wd.mean) + geom_line(aes(x = interval, y = mean.steps)) +
facet_wrap(~weekEnd.day,nrow = 2) +
ggtitle('Mean number of steps per interval by weekday or weekend') +
ylab('Mean number of steps')
ggplot(dataActivity.wd.mean) + geom_line(aes(x = interval, y = mean.steps)) +
facet_wrap(~weekEnd.day,nrow = 2) + theme_bw() +
ggtitle('WeekEnd & WeekDay Patterns') +
xlab('Interval') +
ylab('Mean number of steps')
View(dataActivity)
View(dataActivity.wd)
dataActivity.wd.mean <- dataActivity.wd %>% group_by(time,weekEnd.day) %>%
summarise(mean.steps = mean(steps, na.rm = T))
View(dataActivity.wd)
dataActivity.wd.mean <- dataActivity.wd %>% group_by(date,weekEnd.day) %>%
summarise(mean.steps = mean(steps, na.rm = T))
View(dataActivity.wd)
View(dataActivity.wd.mean)
ggplot(dataActivity.wd.mean) + geom_line(aes(x = date, y = mean.steps)) +
facet_wrap(~weekEnd.day,nrow = 2) + theme_bw() +
ggtitle('WeekEnd & WeekDay Patterns') +
xlab('Interval') +
ylab('Mean number of steps')
View(dataActivity.Imputed)
dataActivity.wd <- dataActivity.Imputed %>% mutate(date = as.Date(date), weekDay = weekdays(date)) %>%
# Calculate if weekend or weekday to create factor
mutate(weekEnd.day = ifelse(weekDay %in% c('Saturday','Sunday'),'weekEnd','weekDay'))
# Reorder weekend/weekday factor
dataActivity.wd$weekEnd.day <- relevel(factor(dataActivity.wd$weekEnd.day), ref = 'weekEnd')
# Average number of steps during weekend/weekdays
dataActivity.wd.mean <- dataActivity.wd %>% group_by(interval,weekEnd.day) %>%
summarise(mean.steps = mean(steps, na.rm = T))
# set the locale for english weekdays
Sys.setlocale("LC_TIME", "English")
#Make dates dateobjects and generate weekday field
dataActivity.wd <- dataActivity.Imputed %>% mutate(date = as.Date(date), weekDay = weekdays(date)) %>%
# Calculate if weekend or weekday to create factor
mutate(weekEnd.day = ifelse(weekDay %in% c('Saturday','Sunday'),'weekEnd','weekDay'))
# Reorder weekend/weekday factor
dataActivity.wd$weekEnd.day <- relevel(factor(dataActivity.wd$weekEnd.day), ref = 'weekEnd')
# Average number of steps during weekend/weekdays
dataActivity.wd.mean <- dataActivity.wd %>% group_by(interval,weekEnd.day) %>%
summarise(mean.steps = mean(steps, na.rm = T))
# set the locale for english weekdays
Sys.setlocale("LC_TIME", "English")
#Make dates dateobjects and generate weekday field
dataActivity.wd <- dataActivity.Imputed %>% mutate(date = as.Date(date), weekDay = weekdays(date)) %>%
# Calculate if weekend or weekday to create factor
mutate(weekEnd.day = ifelse(weekDay %in% c('Saturday','Sunday'),'weekEnd','weekDay'))
# Reorder weekend/weekday factor
dataActivity.wd$weekEnd.day <- relevel(factor(dataActivity.wd$weekEnd.day), ref = 'weekEnd')
# Average number of steps during weekend/weekdays
dataActivity.wd.mean <- dataActivity.wd %>% group_by(date,weekEnd.day) %>%
summarise(mean.steps = mean(steps, na.rm = T))
ggplot(dataActivity.wd.mean) + geom_line(aes(x = date, y = mean.steps)) +
facet_wrap(~weekEnd.day,nrow = 2) + theme_bw() +
ggtitle('WeekEnd & WeekDay Patterns') +
xlab('Interval') +
ylab('Mean number of steps')
# set the locale for english weekdays
Sys.setlocale("LC_TIME", "English")
#Make dates dateobjects and generate weekday field
dataActivity.wd <- dataActivity.Imputed %>% mutate(date = as.Date(date), weekDay = weekdays(date)) %>%
# Calculate if weekend or weekday to create factor
mutate(weekEnd.day = ifelse(weekDay %in% c('Saturday','Sunday'),'weekEnd','weekDay'))
# Reorder weekend/weekday factor
dataActivity.wd$weekEnd.day <- relevel(factor(dataActivity.wd$weekEnd.day), ref = 'weekEnd')
# Average number of steps during weekend/weekdays
dataActivity.wd.mean <- dataActivity.wd %>% group_by(interval,weekEnd.day) %>%
summarise(mean.steps = mean(steps, na.rm = T))
ggplot(dataActivity.wd.mean) + geom_line(aes(x = interval, y = mean.steps)) +
facet_wrap(~weekEnd.day,nrow = 2) + theme_bw() +
ggtitle('WeekEnd & WeekDay Patterns') +
xlab('Interval') +
ylab('Mean number of steps')
?corr
?cor
View(dataActivity.wd.mean)
dataActivity.wd.mean$weekEnd.day[, "weekEnd"]
dataActivity.wd.mean$weekEnd.day["weekEnd"]
cor(dataActivity.wd.mean$mean.steps, dataActivity.wd.mean$weekEnd.day)
```{r Plot WE & Wd}
ggplot(dataActivity.wd.mean) + geom_line(aes(x = interval, y = mean.steps)) + facet_wrap(~weekEnd.day,nrow = 2) + theme_bw() + ggtitle('WeekEnd & WeekDay Patterns') + xlab('Interval') + ylab('Mean number of steps')
setwd("~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment1")
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment1/Code.R')
setwd("~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment1")
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment1/Code.R')
setwd("~/")
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment2/Code.R')
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment2/Code.R')
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment2/Code.R')
if (!"stormData" %in% ls()) {
stormData <- read.csv("data/stormData.csv", sep = ",")
}
dim(stormData)
head(stormData, n = 2)
head(stormData, n = 2)
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment2/Code.R')
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment2/Code.R')
bunzip2("stormData.csv.bz2", overwrite=T, remove=F)
bunzip
??bunzip
install.packages("R.utils")
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment2/Code.R')
bunzip2("stormData.csv.bz2", overwrite=T, remove=F)
if(!file.exists("StormData.csv"))
bunzip2("stormData.csv.bz2", overwrite=T, remove=F)
stormData <- read.csv("stormData.csv", sep = ",")
View(stormData)
dim(stormData)
head(stormData, n = 2)
summary(stormData)
q()
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment2/Code.R')
sortHelper <- function(fieldName, top = 15, dataset = stormData) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$EVTYPE), FUN = "sum")
names(field) <- c("EVTYPE", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, EVTYPE <- factor(x = EVTYPE, levels = field$EVTYPE))
return(field)
}
fatalities <- sortHelper("FATALITIES", dataset = storm)
fatalities <- sortHelper("fatalities")
fatalities <- sortHelper("fatalities", dataset = stormData)
fatalities <- sortHelper("fatalities", top=15, dataset = stormData)
sortHelper <- function(fieldName, top = 15, dataset = stormData) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$evtype), FUN = "sum")
names(field) <- c("evtype", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, evtype <- factor(x = evtype, levels = field$evtype))
return(field)
}
fatalities <- sortHelper("fatalities", dataset = stormdata)
fatalities <- sortHelper("fatalities", dataset = stormData)
??arrange
lybrary(dplyr)
library(dplyr)
fatalities <- sortHelper("fatalities", dataset = stormData)
fatalities <- sortHelper("injuries", dataset = stormData)
fatalities <- sortHelper("fatalities", dataset = stormData)
function (data, dots)
View(stormData)
rm("sortHelper")
sortHelper <- function(fieldName, top = 15, dataset = stormData) {
index <- which(colnames(dataset) == fieldName)
field <- aggregate(dataset[, index], by = list(dataset$evtype), FUN = "sum")
names(field) <- c("evtype", fieldName)
field <- arrange(field, field[, 2], decreasing = T)
field <- head(field, n = top)
field <- within(field, evtype <- factor(x = evtype, levels = field$evtype))
return(field)
}
fatalities <- sortHelper("fatalities", dataset = stormData)
dim(stormData)
?arrange
rm("sortHelper")
tf <- tapply(stormData$fatalities,stormData$evtype,sum)
#creating a data frame which we can use
tfdf <- data.frame(eventtype=names(tf), fat=as.numeric(tf))
#order by fatalities descending
tfdf <- tfdf[order(tfdf$fat,decreasing=TRUE),]
#take top 20
tfdf <- tfdf[1:20,]
print(tfdf)
par(mar=c(13,7,2,2),las=3)
barplot(tfdf$fat, names.arg=tfdf$eventtype, col=tfdf$eventtype,
ylab="Total Fatalities",
main="Top 20 Total Fatalities per Event Type")
title(xlab = "Event Type", line=11)
par(mar=c(13,7,2,2),las=3)
barplot(tfdf$fat, names.arg=tfdf$eventtype, col=tfdf$eventtype,
ylab="Total Fatalities",
main="Top 20 Total Fatalities per Event Type")
title(xlab = "Event Type", line=11)
par(mar=c(13,7,2,2),las=3)
barplot
barplot(tfdf$fat, names.arg=tfdf$eventtype, col=tfdf$eventtype,
ylab="Total Fatalities",
main="Top 20 Total Fatalities per Event Type")
barplot(tfdf$fat, names.arg=tfdf$eventtype, col=tfdf$eventtype)
View(tfdf)
barplot(tfdf$fat, names.arg=tfdf$eventtype, col=tfdf$eventtype)
q()
setwd("~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment2")
source('~/Data Science Specialization/05 Reproducible Research/RepData_PeerAssessment2/Code.R')
q()
